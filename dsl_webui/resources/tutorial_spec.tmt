/*
 * This is a block-style comment
 */

// This is a line-style comment.

/*
 * The State Vector defines the different variables which describe the state of the system.
 * You need to define at least one state variable, along with its possible values.
 */
BEGIN STATE VECTOR
state S_Location can be charger, hallway, workstation
state S_Battery can be low, normal
state S_Beacon can be on, off
END STATE VECTOR

BEGIN ALIASES
// For brevity and easier readability, aliases can be defined for predicates.
// Once defined, these can be used anywhere you'd be able to use the full predicate
define can_charge as
S_Location is charger
END ALIASES


/*
 * Resources can be used to prevent mutually exclusive actions from being executed at the same time.
 * When multiple actions "use" the same resource, they cannot be active at the same time.
 */
BEGIN RESOURCES
resource MOTORS
resource BEACON
resource BEEPER
END RESOURCES


/*
 * The following list defines which actions the system can execute.
 * For each action, you can also specify what resources are required, the preconditions
 * and the effects of the action. A distinction is made between nominal (most likely, intended)
 * effects and alternative (less likely and less desired) effects. Nominal effects are used to plan towards
 * the goals while alternative effects are considered only when guaranteeing safety.
 * Finally, durations can be specified to guide Tumato in restoring safety the "fastest" way, when needed.
 * The use of durations does however reduce the performance of the solver.
 */
BEGIN ACTIONS
action beacon_on
duration: 1
controlled resources: BEACON
preconditions:
S_Beacon is off
nominal effects:
S_Beacon is on

action beacon_off
duration: 1
controlled resources: BEACON
preconditions:
S_Beacon is on
nominal effects:
S_Beacon is off

action move_to_workstation
duration: 10
controlled resources: MOTORS
preconditions: none
nominal effects:
S_Location is workstation
alternative effects:
S_Location is hallway

action move_to_charger
duration: 10
controlled resources: MOTORS
preconditions: none
nominal effects:
S_Location is charger
alternative effects:
S_Location is workstation
alternative effects:
S_Location is hallway

action charge
duration: 100
controlled resources: MOTORS
preconditions:
S_Location is charger
nominal effects:
S_Battery is normal
alternative effects:
S_Battery is low

action beep
duration: 1
controlled resources: BEEPER
preconditions: none
nominal effects: none
END ACTIONS


/*
 * Reaction Rules allow you to specify condition for which an action must certainly (not) execute.
 * These conditions can involve state variables, as well as the execution state of other actions
 */
BEGIN REACTION RULES
// In this case, whenever the robot is moving to the charger (and only to the charger), it must also
// execute the beep action. We don't enforce any BEEPER behavior when the robot is not moving
rule: IF executing move_to_workstation THEN NOT executing beep
rule: IF executing move_to_charger THEN executing beep
END REACTION RULES

/*
 * State Rules are a stronger type of rules than Reaction Rules allowing you to specify conditions which
 * must certainly hold. These conditions typically only involve state variables.
 */
BEGIN STATE RULES
rule: IF S_Location is hallway OR S_Location is workstation THEN S_Beacon is on
END STATE RULES


/*
 * Assumptions allow you to specify additional knowledge about the system and its environment.
 * The behavior solver will only consider states in which the assumptions are satisfied.
 * You should only add assumptions for which you are certain they will not be broken.
 */
BEGIN ASSUMPTIONS
//assume: S_Beacon is on IFONLYIF NOT S_Beacon is off // A trivial (and unnecessary) example
//assume: IF S_Charging is active then S_Location is charger // An example where charging could be detected
END ASSUMPTIONS


/*
 * Goals are how the system is motivated to actually execute actions.
 */
BEGIN GOALS

// The list of goals below is considered from the top to bottom, checking whether
// the condition for each goal is satisfied.
// Once a goal is found for which the condition is satisfied, no further goals are considered.
// This means that the order in which goals are specified also implies their priority!
// If a goal has no condition, it acts as if it is satisfied.
goal type: priority

// It is possible to specify a "true" goal. This will always be satisfied. In this case, the
// system does not have a goal when S_Battery is normal.
when
S_Battery is normal
then goal: true


when S_Battery is low
then goal:
S_Battery is normal

// This goal will never be executed, since if the condition is true, it will also
// match the previous goal and execute that one.
// This goal demonstrates how to use hierarchical goal lists.
// Instead of specifying a single goal, we can specify a list of goals
when S_Battery is low
then
	// It is possible to declare a goal list as constraint goals
	// In that case, every goal in the list will be active if the list is active.
	BEGIN GOALS
	goal type: constraint

	goal: can_charge // Here we show how to use the alias we have defined above.

	goal: executing charge // Also note how executing an action can also be a goal.
	END GOALS
END GOALS

BEGIN CONFIG

// This determines how many steps the planner has to reach a goal.
// If a goal takes more than this amount of steps, the solver will not be able to find a plan to reach that goal.
max_plan_length: 5

END CONFIG