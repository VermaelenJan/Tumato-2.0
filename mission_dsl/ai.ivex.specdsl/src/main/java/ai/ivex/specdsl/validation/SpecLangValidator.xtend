/*
 * generated by Xtext 2.12.0
 */
package ai.ivex.specdsl.validation

import org.eclipse.xtext.validation.Check
import ai.ivex.specdsl.specLang.Model
import ai.ivex.specdsl.specLang.StateVectorBlock
import ai.ivex.specdsl.specLang.ActionsBlock
import ai.ivex.specdsl.specLang.AliasBlock
import ai.ivex.specdsl.specLang.ResourcesBlock
import ai.ivex.specdsl.specLang.ReactionRulesBlock
import ai.ivex.specdsl.specLang.AssumptionsBlock
import ai.ivex.specdsl.specLang.ConfigBlock

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SpecLangValidator extends AbstractSpecLangValidator {
	

	@Check
	def checkModelHasOneStateVectorBlock(Model model) {
		if(model.blocks.filter(StateVectorBlock).empty){
			error("No \"STATE VECTOR\" block has been defined.", model.eContainingFeature)
		}
		if(model.blocks.filter(StateVectorBlock).length > 1){
			error("More than one \"STATE VECTOR\" block has been defined.", model.eContainingFeature)
		}
	}

	@Check
	def checkModelHasOneActionBlock(Model model) {
		if(model.blocks.filter(ActionsBlock).empty){
			error("No \"ACTIONS\" block has been defined.", model.eContainingFeature)
		}
		if(model.blocks.filter(ActionsBlock).length > 1){
			error("More than one \"ACTIONS\" block has been defined.", model.eContainingFeature)
		}
	}	

	@Check
	def checkModelHasAtMostOneAliasBlock(Model model) {
		if(model.blocks.filter(AliasBlock).length > 1){
			error("More than one \"ALIAS\" block has been defined.", model.eContainingFeature)
		}
	}	

	@Check
	def checkModelHasAtMostOneResourcesBlock(Model model) {
		if(model.blocks.filter(ResourcesBlock).length > 1){
			error("More than one \"RESOURCES\" block has been defined.", model.eContainingFeature)
		}
	}
	
	@Check
	def checkModelHasAtMostOneReactionRulesBlock(Model model) {
		if(model.blocks.filter(ReactionRulesBlock).length > 1){
			error("More than one \"REACTION RULES\" block has been defined.", model.eContainingFeature)
		}
	}	
	
	@Check
	def checkModelHasAtMostOneAssumptionsBlock(Model model) {
		if(model.blocks.filter(AssumptionsBlock).length > 1){
			error("More than one \"ASSUMPTIONS\" block has been defined.", model.eContainingFeature)
		}
	}	
	
	@Check
	def checkModelHasAtMostOneGoalsBlock(Model model) {
		if(model.blocks.filter(ActionsBlock).length > 1){
			error("More than one \"GOALS\" block has been defined.", model.eContainingFeature)
		}
	}	
	
	@Check
	def checkModelHasOneConfigBlock(Model model) {
		if(model.blocks.filter(ConfigBlock).empty){
			error("No \"CONFIG\" block has been defined.", model.eContainingFeature)
		}
		if(model.blocks.filter(ConfigBlock).length > 1){
			error("More than one \"CONFIG\" block has been defined.", model.eContainingFeature)
		}
	}		
	
}
